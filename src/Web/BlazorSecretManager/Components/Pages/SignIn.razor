@page "/signin"

@using BlazorSecretManager.Components.Layout
@using BlazorSecretManager.Infrastructure
@using BlazorSecretManager.Services.Auth
@using eXtensionSharp
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using SecretManager
@using Color = MudBlazor.Color

@rendermode InteractiveAuto

@layout LoginLayout

@attribute [AllowAnonymous]

<AuthorizeView>
    <Authorized>
        <h5>You are authenticated. Access is denied.</h5>
    </Authorized>
    <NotAuthorized>
        <EditForm Model="@_loginRequest">
            <ChildContent Context="None">
                <DataAnnotationsValidator/>
                <MudGrid Class="d-flex justify-center flex-grow-1 gap-4 align-center" Style="height: 80vh;" >
                    <MudItem xs="12" sm="7">
                        <MudCard>
                            <MudCardContent>
                                <MudTextField Label="Email" Class="mt-3"
                                              @bind-Value="_loginRequest.Email" For="@(() => _loginRequest.Email)"/>
                                <MudTextField Label="Password" Class="mt-3"
                                              @bind-Value="_loginRequest.Password" For="@(() => _loginRequest.Password)" InputType="InputType.Password"/>
                            </MudCardContent>
                            <MudCardActions>
                                <br/><br/>
                                <MudGrid Class="d-flex justify-end flex-grow-1 gap-4">
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSignIn">Sign In</MudButton>
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSignUp">Sign Up</MudButton>
                                </MudGrid>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </ChildContent>
        </EditForm>
    </NotAuthorized>
</AuthorizeView>

@inject ISnackbar Snackbar;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject IAuthService AuthService;

@code {
    [CascadingParameter] Task<AuthenticationState> AuthState { get; set; }
    [Inject] CustomAuthStateProvider _authStateProvider { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    
    LoginRequest _loginRequest = new();

    private async Task HandleSignIn()
    {
        if (string.IsNullOrWhiteSpace(_loginRequest.Email) || string.IsNullOrWhiteSpace(_loginRequest.Password))
        {
            return;
        }

        var token = await AuthenticateUser(_loginRequest.Email, _loginRequest.Password);
        if (token.xIsEmpty())
        {
            Snackbar.Add("request administrator");
            return;
        }

        // 확장 함수를 통해 토큰 암호화 후 localStorage에 저장
        await ProtectedSessionStore.SetAsync(Constants.JwtCacheKey, token);
        _authStateProvider.NotifyUserAuthentication(token);
        StateHasChanged();
        _navigationManager.NavigateTo("/", true);
    }
    
    private async Task<string> AuthenticateUser(string email, string password)
    {
        await Task.Delay(1);

        return await AuthService.SignIn(email, password);
    }

    void HandleSignUp()
    {
        _navigationManager.NavigateTo("/signup", true);
    }
}